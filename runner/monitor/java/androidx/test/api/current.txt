// Signature format: 3.0
package androidx.test {

  @Deprecated public final class InstrumentationRegistry {
    method @Deprecated public static android.os.Bundle! getArguments();
    method @Deprecated public static android.content.Context! getContext();
    method @Deprecated public static android.app.Instrumentation! getInstrumentation();
    method @Deprecated public static android.content.Context! getTargetContext();
    method @Deprecated public static void registerInstance(android.app.Instrumentation!, android.os.Bundle!);
  }

}

package androidx.test.annotation {

  @Deprecated @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) @java.lang.annotation.Target({java.lang.annotation.ElementType.ANNOTATION_TYPE, java.lang.annotation.ElementType.CONSTRUCTOR, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.TYPE}) public @interface Beta {
  }

}

package androidx.test.internal.platform {

  @androidx.test.annotation.InternalTestApi public final class ServiceLoaderWrapper {
    method public static <T> java.util.List<T!>! loadService(Class<T!>!);
    method public static <T> T! loadSingleService(Class<T!>!, androidx.test.internal.platform.ServiceLoaderWrapper.Factory<T!>!);
    method public static <T> T! loadSingleServiceOrNull(Class<T!>!);
  }

  public static interface ServiceLoaderWrapper.Factory<T> {
    method public T! create();
  }

  @androidx.test.annotation.InternalTestApi public interface ThreadChecker {
    method public void checkMainThread();
    method public void checkNotMainThread();
  }

}

package androidx.test.internal.platform.app {

  @androidx.test.annotation.InternalTestApi public interface ActivityInvoker {
    method public void finishActivity(android.app.Activity!);
    method public android.app.Instrumentation.ActivityResult! getActivityResult();
    method public default android.content.Intent! getIntentForActivity(Class<? extends android.app.Activity>!);
    method public void pauseActivity(android.app.Activity!);
    method public void recreateActivity(android.app.Activity!);
    method public void resumeActivity(android.app.Activity!);
    method public void startActivity(android.content.Intent!, android.os.Bundle?);
    method public void startActivity(android.content.Intent!);
    method public void stopActivity(android.app.Activity!);
  }

  @androidx.test.annotation.InternalTestApi public class ActivityLifecycleTimeout {
    ctor public ActivityLifecycleTimeout();
    method public static long getMillis();
  }

}

package androidx.test.internal.platform.content {

  @androidx.test.annotation.InternalTestApi public interface PermissionGranter {
    method public void addPermissions(java.lang.String!...);
    method public void requestPermissions();
  }

}

package androidx.test.internal.platform.os {

  @androidx.test.annotation.InternalTestApi public interface ControlledLooper {
    method public void drainMainThreadUntilIdle();
    method public void simulateWindowFocus(android.view.View!);
    field public static final androidx.test.internal.platform.os.ControlledLooper! NO_OP_CONTROLLED_LOOPER;
  }

}

package androidx.test.internal.platform.util {

  @androidx.test.annotation.InternalTestApi public class TestOutputEmitter {
    method public static boolean addOutputProperties(java.util.Map<java.lang.String!,java.io.Serializable!>!);
    method public static boolean captureWindowHierarchy(String!);
    method public static void dumpThreadStates(String!);
    method public static boolean takeScreenshot(String!);
  }

}

package androidx.test.internal.runner {

  @androidx.test.annotation.InternalTestApi public class InstrumentationConnection {
    method public java.util.Set<android.os.Messenger!>! getClientsForType(String!);
    method public static androidx.test.internal.runner.InstrumentationConnection! getInstance();
    method public void init(android.app.Instrumentation!, androidx.test.runner.MonitoringInstrumentation.ActivityFinisher!);
    method public void registerClient(String!, android.os.Messenger!);
    method public void requestRemoteInstancesActivityCleanup();
    method public void terminate();
    method public void unregisterClient(String!, android.os.Messenger!);
    field public static final String BROADCAST_FILTER = "androidx.test.runner.InstrumentationConnection.event";
  }

}

package androidx.test.internal.runner.intent {

  @androidx.test.annotation.InternalTestApi public final class IntentMonitorImpl implements androidx.test.runner.intent.IntentMonitor {
    ctor public IntentMonitorImpl();
    method public void addIntentCallback(androidx.test.runner.intent.IntentCallback);
    method public void removeIntentCallback(androidx.test.runner.intent.IntentCallback);
    method public void signalIntent(android.content.Intent!);
  }

}

package androidx.test.internal.runner.lifecycle {

  @androidx.test.annotation.InternalTestApi public final class ActivityLifecycleMonitorImpl implements androidx.test.runner.lifecycle.ActivityLifecycleMonitor {
    ctor public ActivityLifecycleMonitorImpl();
    ctor public ActivityLifecycleMonitorImpl(boolean);
    method public void addLifecycleCallback(androidx.test.runner.lifecycle.ActivityLifecycleCallback!);
    method public java.util.Collection<android.app.Activity!>! getActivitiesInStage(androidx.test.runner.lifecycle.Stage!);
    method public androidx.test.runner.lifecycle.Stage! getLifecycleStageOf(android.app.Activity!);
    method public void removeLifecycleCallback(androidx.test.runner.lifecycle.ActivityLifecycleCallback!);
    method public void signalLifecycleChange(androidx.test.runner.lifecycle.Stage!, android.app.Activity!);
  }

  @androidx.test.annotation.InternalTestApi public class ApplicationLifecycleMonitorImpl implements androidx.test.runner.lifecycle.ApplicationLifecycleMonitor {
    ctor public ApplicationLifecycleMonitorImpl();
    method public void addLifecycleCallback(androidx.test.runner.lifecycle.ApplicationLifecycleCallback!);
    method public void removeLifecycleCallback(androidx.test.runner.lifecycle.ApplicationLifecycleCallback!);
    method public void signalLifecycleChange(android.app.Application!, androidx.test.runner.lifecycle.ApplicationStage!);
  }

}

package androidx.test.internal.util {

  @androidx.test.annotation.InternalTestApi public final class Checks {
    method public static void checkArgument(boolean);
    method public static void checkArgument(boolean, Object!);
    method public static void checkArgument(boolean, String!, java.lang.Object!...);
    method public static void checkMainThread();
    method public static void checkNotMainThread();
    method public static <T> T! checkNotNull(T!);
    method public static <T> T! checkNotNull(T!, Object!);
    method public static <T> T! checkNotNull(T!, String!, java.lang.Object!...);
    method public static void checkState(boolean);
    method public static void checkState(boolean, Object!);
    method public static void checkState(boolean, String!, java.lang.Object!...);
  }

  @androidx.test.annotation.InternalTestApi public final class LogUtil {
    ctor public LogUtil();
    method public static void logDebug(String!, String!, java.lang.Object!...);
    method public static void logDebugWithProcess(String!, String!, java.lang.Object!...);
  }

  @androidx.test.annotation.InternalTestApi public class ParcelableIBinder implements android.os.Parcelable {
    ctor public ParcelableIBinder(android.os.IBinder!);
    ctor protected ParcelableIBinder(android.os.Parcel!);
    method public int describeContents();
    method public android.os.IBinder! getIBinder();
    method public void writeToParcel(android.os.Parcel!, int);
    field public static final android.os.Parcelable.Creator<androidx.test.internal.util.ParcelableIBinder!>! CREATOR;
  }

  @Deprecated @androidx.test.annotation.InternalTestApi public class ReflectionUtil {
    ctor @Deprecated public ReflectionUtil();
    method @Deprecated public static Object! callStaticMethod(String!, String!, androidx.test.internal.util.ReflectionUtil.ReflectionParams!...) throws androidx.test.internal.util.ReflectionUtil.ReflectionException;
    method @Deprecated public static Object! callStaticMethod(Class<?>!, String!, androidx.test.internal.util.ReflectionUtil.ReflectionParams!...) throws androidx.test.internal.util.ReflectionUtil.ReflectionException;
  }

  @Deprecated public static class ReflectionUtil.ReflectionException extends java.lang.Exception {
  }

  @Deprecated public static class ReflectionUtil.ReflectionParams {
    ctor @Deprecated public ReflectionUtil.ReflectionParams(Class<?>!, Object!);
    method @Deprecated public static Class<?>![]! getTypes(androidx.test.internal.util.ReflectionUtil.ReflectionParams![]!);
    method @Deprecated public static Object![]! getValues(androidx.test.internal.util.ReflectionUtil.ReflectionParams![]!);
  }

}

package androidx.test.platform {

  public interface TestFrameworkException {
  }

}

package androidx.test.platform.app {

  public final class InstrumentationRegistry {
    method public static android.os.Bundle! getArguments();
    method public static android.app.Instrumentation! getInstrumentation();
    method public static void registerInstance(android.app.Instrumentation!, android.os.Bundle!);
  }

}

package androidx.test.platform.graphics {

  public class HardwareRendererCompat {
    method public static boolean isDrawingEnabled();
    method public static void setDrawingEnabled(boolean);
  }

}

package androidx.test.platform.reflect {

  public class ReflectionException extends java.lang.Exception {
  }

  public class ReflectiveField<T> {
    ctor public ReflectiveField(String!, String!);
    method public T! get(Object!) throws androidx.test.platform.reflect.ReflectionException;
  }

  public class ReflectiveMethod<T> {
    ctor public ReflectiveMethod(String!, String!, Class<?>!...);
    method public T! invoke(Object!, java.lang.Object!...) throws androidx.test.platform.reflect.ReflectionException;
    method public T! invokeStatic(java.lang.Object!...) throws androidx.test.platform.reflect.ReflectionException;
  }

}

package androidx.test.platform.ui {

  public class InjectEventSecurityException extends java.lang.Exception implements androidx.test.platform.TestFrameworkException {
    ctor public InjectEventSecurityException(String!);
    ctor public InjectEventSecurityException(Throwable!);
    ctor public InjectEventSecurityException(String!, Throwable!);
  }

  public interface UiController {
    method public boolean injectKeyEvent(android.view.KeyEvent!) throws androidx.test.platform.ui.InjectEventSecurityException;
    method public boolean injectMotionEvent(android.view.MotionEvent!) throws androidx.test.platform.ui.InjectEventSecurityException;
    method public boolean injectString(String!) throws androidx.test.platform.ui.InjectEventSecurityException;
    method public void loopMainThreadForAtLeast(long);
    method public void loopMainThreadUntilIdle();
  }

}

package androidx.test.platform.view.inspector {

  @androidx.test.annotation.InternalTestApi public class WindowInspectorCompat {
    method public static java.util.List<android.view.View!>! getGlobalWindowViews() throws androidx.test.platform.view.inspector.WindowInspectorCompat.ViewRetrievalException;
  }

  public static class WindowInspectorCompat.ViewRetrievalException extends java.lang.Exception {
  }

}

package androidx.test.runner {

  public class MonitoringInstrumentation extends androidx.test.internal.runner.hidden.ExposedInstrumentationApi {
    ctor public MonitoringInstrumentation();
    method protected void dumpThreadStateToOutputs(String!);
    method public void execStartActivities(android.content.Context!, android.os.IBinder!, android.os.IBinder!, android.app.Activity!, android.content.Intent![]!, android.os.Bundle!);
    method public android.app.Instrumentation.ActivityResult! execStartActivity(android.content.Context!, android.os.IBinder!, android.os.IBinder!, android.app.Activity!, android.content.Intent!, int);
    method public android.app.Instrumentation.ActivityResult! execStartActivity(android.content.Context!, android.os.IBinder!, android.os.IBinder!, android.app.Activity!, android.content.Intent!, int, android.os.Bundle!);
    method public android.app.Instrumentation.ActivityResult! execStartActivity(android.content.Context!, android.os.IBinder!, android.os.IBinder!, String!, android.content.Intent!, int, android.os.Bundle!);
    method public android.app.Instrumentation.ActivityResult! execStartActivity(android.content.Context!, android.os.IBinder!, android.os.IBinder!, android.app.Activity!, android.content.Intent!, int, android.os.Bundle!, android.os.UserHandle!);
    method public android.app.Instrumentation.ActivityResult! execStartActivity(android.content.Context!, android.os.IBinder!, android.os.IBinder!, android.app.Fragment!, android.content.Intent!, int, android.os.Bundle!);
    method protected String! getThreadState();
    method protected void installMultidex();
    method protected void installOldMultiDex(Class<?>!) throws java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, java.lang.NoSuchMethodException;
    method public void interceptActivityUsing(androidx.test.runner.intercepting.InterceptingActivityFactory!);
    method @Deprecated protected boolean isPrimaryInstrProcess(String?);
    method protected final boolean isPrimaryInstrProcess();
    method protected void restoreUncaughtExceptionHandler();
    method protected final void setJsBridgeClassName(String!);
    method protected boolean shouldWaitForActivitiesToComplete();
    method protected void specifyDexMakerCacheProperty();
    method protected Throwable! unwrapException(Throwable!);
    method public void useDefaultInterceptingActivityFactory();
    method protected void waitForActivitiesToComplete();
  }

  public class MonitoringInstrumentation.ActivityFinisher implements java.lang.Runnable {
    ctor public MonitoringInstrumentation.ActivityFinisher();
    method public void run();
  }

}

package androidx.test.runner.intent {

  public interface IntentCallback {
    method public void onIntentSent(android.content.Intent!);
  }

  public interface IntentMonitor {
    method public void addIntentCallback(androidx.test.runner.intent.IntentCallback!);
    method public void removeIntentCallback(androidx.test.runner.intent.IntentCallback!);
  }

  public final class IntentMonitorRegistry {
    method public static androidx.test.runner.intent.IntentMonitor! getInstance();
    method public static void registerInstance(androidx.test.runner.intent.IntentMonitor!);
  }

  public interface IntentStubber {
    method public android.app.Instrumentation.ActivityResult! getActivityResultForIntent(android.content.Intent!);
  }

  public final class IntentStubberRegistry {
    method public static androidx.test.runner.intent.IntentStubber! getInstance();
    method public static boolean isLoaded();
    method public static void load(androidx.test.runner.intent.IntentStubber!);
    method public static void reset();
  }

}

package androidx.test.runner.intercepting {

  public interface InterceptingActivityFactory {
    method public android.app.Activity! create(ClassLoader!, String!, android.content.Intent!);
    method public boolean shouldIntercept(ClassLoader!, String!, android.content.Intent!);
  }

}

package androidx.test.runner.lifecycle {

  public interface ActivityLifecycleCallback {
    method public void onActivityLifecycleChanged(android.app.Activity!, androidx.test.runner.lifecycle.Stage!);
  }

  public interface ActivityLifecycleMonitor {
    method public void addLifecycleCallback(androidx.test.runner.lifecycle.ActivityLifecycleCallback!);
    method public java.util.Collection<android.app.Activity!>! getActivitiesInStage(androidx.test.runner.lifecycle.Stage!);
    method public androidx.test.runner.lifecycle.Stage! getLifecycleStageOf(android.app.Activity!);
    method public void removeLifecycleCallback(androidx.test.runner.lifecycle.ActivityLifecycleCallback!);
  }

  public final class ActivityLifecycleMonitorRegistry {
    method public static androidx.test.runner.lifecycle.ActivityLifecycleMonitor! getInstance();
    method public static void registerInstance(androidx.test.runner.lifecycle.ActivityLifecycleMonitor!);
  }

  public interface ApplicationLifecycleCallback {
    method public void onApplicationLifecycleChanged(android.app.Application!, androidx.test.runner.lifecycle.ApplicationStage!);
  }

  public interface ApplicationLifecycleMonitor {
    method public void addLifecycleCallback(androidx.test.runner.lifecycle.ApplicationLifecycleCallback!);
    method public void removeLifecycleCallback(androidx.test.runner.lifecycle.ApplicationLifecycleCallback!);
  }

  public final class ApplicationLifecycleMonitorRegistry {
    method public static androidx.test.runner.lifecycle.ApplicationLifecycleMonitor! getInstance();
    method public static void registerInstance(androidx.test.runner.lifecycle.ApplicationLifecycleMonitor!);
  }

  public enum ApplicationStage {
    enum_constant public static final androidx.test.runner.lifecycle.ApplicationStage CREATED;
    enum_constant public static final androidx.test.runner.lifecycle.ApplicationStage PRE_ON_CREATE;
  }

  public enum Stage {
    enum_constant public static final androidx.test.runner.lifecycle.Stage CREATED;
    enum_constant public static final androidx.test.runner.lifecycle.Stage DESTROYED;
    enum_constant public static final androidx.test.runner.lifecycle.Stage PAUSED;
    enum_constant public static final androidx.test.runner.lifecycle.Stage PRE_ON_CREATE;
    enum_constant public static final androidx.test.runner.lifecycle.Stage RESTARTED;
    enum_constant public static final androidx.test.runner.lifecycle.Stage RESUMED;
    enum_constant public static final androidx.test.runner.lifecycle.Stage STARTED;
    enum_constant public static final androidx.test.runner.lifecycle.Stage STOPPED;
  }

}

