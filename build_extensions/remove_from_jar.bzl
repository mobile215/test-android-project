"""Removes files / directories from jar (or any zip) file.

If overlapping_jars is present, then it also removes entries in the
primary jar that exists in any of the overlapping_jars.
"""

def remove_from_jar(
    name,
    jar,
    removes = [],
    overlapping_jars = [],
    visibility = None,
    constraints = None,
    **kwargs):
  """Removes specified entries from a jar file.

  The entries to remove can be specified with with any combination of 'removes'
  and 'overlapping_jars'.
  It generates two relevant targets: <name> and lib<name>,
  where <name> target is pure genrule output, that has 'concrete' jar, while
  lib<name> is a java_library rule that contains <name> in its srcs.

  Args:
    name: Name of the remove jars target, String.
    jar: jar from which to remove files, label.
    removes: List of items to be removed from a jar file. Also can
      specify what to keep within remove spec,
      format <remove path>|<keep1>,<keep2>
      All remove entries are regular expressions. All items in removes
      are prepended with ^, to match from the beggining of filename.
    overlapping_jars: jars containing entries to be removed from the main jar.
    visibility: (Optional) visibility of the rules generated by this macro.
    constraints: (Optional) constraints imposed on this rule as a Java library.
      Currently defaults to ["android"] for compatibility reasons, but this will
      be removed in the future.
    **kwargs: Args to be passed to genrule and java_library, so valid args are
      common set between those two:
        deprecation, distribs, licenses, obsolete, tags, testonly, visibility

  Usage:
    remove_from_jar(
      name = "jar_cleaned",
      removes = [ "foo/bar/", "bar/foo/" ],
      overlapping_jars = [":fooapp_deploy.jar"])
    Explanation:
      Removes foo/bar/ and bar/foo/ from the jar file.
      Uses fooapp_deploy.jar overlapping jar, to remove entries in main
      jar that are also present in the overlapping jar.

    remove_from_jar(
      name = "jar_cleaned",
      removes = [ "foo/.*|foo/bar,foo/bar2", "/bar/foo/.*" ])
    Explanation:
      This will remove everything from foo/.* except foo/bar and foo/bar2.
  """
  if not jar or jar == "":
    fail('"jar" attribute cannot be null or empty')

  if not removes and not overlapping_jars:
    fail('at least one of "removes" or "overlapping_jars" must be set')

  if constraints == None:
    constraints = ["android"]

  remove_files = []
  keep_files = []
  srcs = [jar]
  message = ('Removing %s from "%s." ' % (" ".join(removes), jar)) if removes else ""

  # Add overlapping_jars to sources if specified.
  for overlapping_jar in overlapping_jars:
    srcs += [overlapping_jar]
    message += (
        'Removing elements in "%s" that are present in overlapping jar "%s."'
        % (jar, overlapping_jar)
    )

  for remove in removes:
    remove_file = remove
    if "|" in remove:
      remove_file, keeps = remove.split("|")
      keep_files += keeps.split(",")
    remove_files += ["^" + remove_file]

  cmd = [
      "set +o pipefail;",
      "tmpdir=$$(mktemp -d);",
      ("cp $(location %s) $@; chmod +w $@; $(location " +
       "@local_jdk//:jar) tf $@ >") % jar,
      "$$tmpdir/file_list.txt;",
  ]

  if remove_files:
    cmd += ['egrep "%s" $$tmpdir/file_list.txt |' % "|".join(remove_files)]

  if keep_files:
    cmd += ['egrep -v "%s" |' % "|".join(keep_files)]

  cmd += [
      "xargs --no-run-if-empty zip -d $@ >",
      "$$tmpdir/remove_from_jar_result.txt 2>&1 || {",
      "  RESULT=$$?;",
      "  cat $$tmpdir/remove_from_jar_result.txt;",
      "  exit $${RESULT};",
      " };",
  ]

  if overlapping_jars:
    for overlapping_jar in overlapping_jars:
      cmd += [
          ("$(location @local_jdk//:jar) tf $(location %s) >> " +
           "$$tmpdir/overlapping_jar.txt;") %
          overlapping_jar,]
    cmd += [
        "$(location @local_jdk//:jar) tf $@ >",
        "$$tmpdir/original_jar.txt;",
        "grep -F -x -f $$tmpdir/overlapping_jar.txt",
        "$$tmpdir/original_jar.txt",
        "| xargs --no-run-if-empty zip -d $@ >",
        "$$tmpdir/remove_from_overlapping_jar_result.txt 2>&1 || {",
        "  RESULT=$$?;",
        "  cat $$tmpdir/remove_from_overlapping_jar_result.txt;",
        "  exit $${RESULT};",
        " };",
    ]

  cmd += ["rm -rf $$tmpdir;"]

  native.genrule(
      name = name,
      srcs = srcs,
      outs = ["%s.jar" % name],
      tools = [
          "@local_jdk//:jar",
      ],
      message = message,
      visibility = visibility,
      cmd = " ".join(cmd),
      **kwargs)

  native.java_import(
      name = "lib%s" % name,
      jars = [name],
      constraints = constraints,
      visibility = visibility,
      **kwargs)